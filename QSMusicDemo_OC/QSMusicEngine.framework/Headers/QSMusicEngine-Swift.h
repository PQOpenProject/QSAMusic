// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import Foundation.NSURLSession;
@import AVFoundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSURL (SWIFT_EXTENSION(QSMusicEngine))
@property (nonatomic, readonly, copy) NSString * _Nonnull URLString;
@end


@interface NSURLComponents (SWIFT_EXTENSION(QSMusicEngine))
@property (nonatomic, readonly, copy) NSString * _Nonnull URLString;
@end

@class NSMutableURLRequest;

@interface NSURLRequest (SWIFT_EXTENSION(QSMusicEngine))
@property (nonatomic, readonly, strong) NSMutableURLRequest * _Nonnull URLRequest;
@end


@interface NSURLRequest (SWIFT_EXTENSION(QSMusicEngine))
@property (nonatomic, readonly, copy) NSString * _Nonnull URLString;
@end


@interface NSURLSession (SWIFT_EXTENSION(QSMusicEngine))
@end

@class NSDictionary;
@class NSArray;
@protocol QSMusicPlayerDelegate;
@class AVPlayerItem;


/// 播放引擎:
///
/// 1、项目 -> TARGETS -> General -> Embedded Binaries -> + -> QSMusicEngine.framework
///
/// 2、如果报像这样的错(可能还有其他, 错误是一样的): dyld: Library not loaded: @rpath/libswiftAVFoundation.dylib (这是OC和Swift混编时, 找不到Swift的库文件)
///
/// 项目 -> TARGETS -> Build Settings -> Build Options -> "Embedded Content Contains Swift Code"  设为YES即可，默认是NO
///
/// 3、找不到头文件(OC和Swift混编时可能会出现):
///
/// Framework的位置一定要放入工程文件里面, 不能和 .xcodeproj 文件同一级
///
/// 4、支持后台播放：工程Target的Capability中, 打开Background Modes, 勾选Audio And Airplay
///
/// 5、支持iOS 8以上系统
SWIFT_CLASS("_TtC13QSMusicEngine13QSMusicPlayer")
@interface QSMusicPlayer : AVQueuePlayer

/// 代理
@property (nonatomic, weak) id <QSMusicPlayerDelegate> _Nullable delegate;

/// 当前播放歌曲的信息
@property (nonatomic, strong) NSDictionary * _Nullable currentSongDetailed;

/// 当前播放序号
@property (nonatomic) NSInteger currentPlayIndex;
+ (QSMusicPlayer * _Nonnull)sharedInstance;

/// 播放指定时间
///
/// \param playIndex 指定时间, 秒计算
+ (void)playAtTime:(double)seconds;
- (void)playAtTime:(double)seconds;

/// 根据数组, 创建播放列表（此方法暂时弃用）
///
/// \param playList 数组, 用来创建播放列表
///
/// \param listid 用于标记数组的id, 如果新id和旧的播放列表id不同就会创建新的播放列表, 否则忽略
+ (void)createPlayListWithPlayList:(NSArray * _Nonnull)playList listid:(NSString * _Nonnull)listid;
- (void)createPlayListWithPlayList:(NSArray * _Nonnull)playList listid:(NSString * _Nonnull)listid;

/// 播放列表指定index歌曲
///
/// \param playIndex 指定index, 如果指定歌曲是当前正在播的歌曲，继续播放该首歌曲。如果指定歌曲无法播放，自动转跳到下一首
+ (void)playAtIndex:(NSInteger)playIndex;
- (void)playAtIndex:(NSInteger)playIndex;

/// 播放控制: 下一曲
+ (void)playNextIndex;
- (void)playNextIndex;

/// 播放控制: 上一曲
+ (void)playPreviousIndex;
- (void)playPreviousIndex;

/// 播放控制: 修改播放模式
///
/// \returns  返回修改后的播放模式名称, 根据具体需求, 返回值可用可不用
+ (NSString * _Nonnull)changePlayMode;
- (NSString * _Nonnull)changePlayMode;

/// 播放控制: 播放
+ (void)play;
- (void)enginePlay;

/// 播放控制: 暂停
+ (void)pause;
- (void)enginePause;

/// 播放状态
///
/// \returns  返回Engine的状态, true为正在播放, false为暂停或未开始
+ (BOOL)isPlaying;
- (BOOL)isPlaying;

/// 当前时间, 用秒计算
+ (double)currentTimes;
- (double)currentTimes;

/// 总时间, 用秒计算
+ (double)duration;
- (double)duration;

/// 当前循环状态
+ (NSString * _Nonnull)curPlayMode;

/// 获取新碟列表
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// list {
/// var album_id:  String?
/// var author:    String?
/// var title:     String?
/// var pic_small: String?
/// var pic_big:   String?
/// var pic_radio: String?
/// }
+ (void)newSingleListWithLimit:(NSInteger)limit responseClosure:(void (^ _Nonnull)(NSArray * _Nonnull dataArr))responseClosure;

/// 通过albumId获取新碟详情
///
/// \param albumId 新碟id
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// songlist {
/// var lrclink:     String?
/// var song_id:     String?
/// var author:      String?
/// var title:       String?
/// var album_title: String?  //专辑
/// var pic_big:     String?
/// var versions:    String? //""或"伴奏"
/// }
+ (void)requestSingleWithAlbumId:(NSString * _Nonnull)albumId response:(void (^ _Nonnull)(NSDictionary * _Nonnull albumInfo, NSArray<NSDictionary *> * _Nonnull songList))responseClosure;

/// 获取歌单分类
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// content {
/// var title: String?
/// var num:   String?
/// var tags: {
/// [tag: String?]
/// [tag: String?]
/// ...
/// }
/// }
+ (void)getSongSheetClass:(void (^ _Nonnull)(NSArray * _Nonnull dataArr))responseClosure;

/// 获取推荐歌单
///
/// \param page _size:       返回数据的个数
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// list {
/// var title:    String?
/// var pic_300:  String?
/// var pic_w300: String?
/// var songIds:  [String]?
/// var listenum: String?
/// }
+ (void)getSongSheetWithPageSize:(NSInteger)size responseClosure:(void (^ _Nonnull)(NSArray * _Nonnull dataArr))responseClosure;

/// 获取最新榜单
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// list {
/// var name:     String?
/// var type:     String?
/// var pic_s210: String?
/// var content:  [NSDictionary]?
/// }
+ (void)getRankingList:(void (^ _Nonnull)(NSArray * _Nonnull dataArr))responseClosure;

/// 获取榜单详情
///
/// <ul><li>type:                      榜单类型</li></ul>
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// 详情 {
/// var billboard : NSDictionary?
/// var song_list : [NSDictionary]?
/// }
+ (void)requestSingleWithType:(NSString * _Nonnull)type size:(NSInteger)size response:(void (^ _Nonnull)(NSDictionary * _Nonnull data))responseClosure;

/// 热门歌手(前30)
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// artist {
/// var name:       String?
/// var avatar_big: String?
/// }
+ (void)getHotSinger:(void (^ _Nonnull)(NSArray * _Nonnull dataArr))responseClosure;

/// 获取指定歌手
///
/// \param sex 性别：1、男  2、女  3、乐对
///
/// \param area 洲：0、中国  3、欧美  7、韩国 60、日本 5、其他
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// artist {
/// var name:       String?
/// var avatar_big: String?
/// }
+ (void)getSingerListWithLimit:(NSInteger)limit areaid:(NSString * _Nonnull)areaid sexid:(NSString * _Nonnull)sexid responseClosure:(void (^ _Nonnull)(NSArray * _Nonnull dataArr))responseClosure;

/// 频道歌单
///
/// \param channelname 频道名称
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// songlist {
/// var songid: String?
/// var title:  String?
/// var artist: String?
/// var thumb:  String? //图片
/// }
+ (void)getChannelListWithChannelName:(NSString * _Nonnull)name responseClosure:(void (^ _Nonnull)(NSArray * _Nonnull dataArr))responseClosure;

/// 搜索指定歌单分类的详情
///
/// \param pageSize 返回数组容量
///
/// \param className 分类名称
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
/// songlist {
/// var listid:   String?
/// var title:    String?
/// var listenum: String? //听众数量
/// var pic_300:  String? //图片
/// }
+ (void)getSongSheetClassDetailsWithPageSize:(NSInteger)size className:(NSString * _Nonnull)name responseClosure:(void (^ _Nonnull)(NSArray * _Nonnull dataArr))responseClosure;

/// 搜索指定歌单详情
///
/// var desc:     String?
/// var pic_w700: String?
/// var content:  [NSDictionary]?
///
/// \param list 歌单
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
+ (void)getSongSheetDetailsWithListid:(NSString * _Nonnull)listid responseClosure:(void (^ _Nonnull)(NSDictionary * _Nonnull data))responseClosure;

/// 搜索关键字
///
/// var song_info: {
/// total:     NSNumber?
/// song_list: {
/// song_id:     String?
/// title:       String?
/// author:      String?
/// album_title: String?
/// versions:    String?
/// }
/// }
/// var artist_info: {
/// total:       NSNumber?
/// artist_list: {
/// avatar_middle: String?
/// artist_desc:   String?
/// }
/// }
/// var album_info: {
/// total:     NSNumber?
/// album_list: {
/// album_id:    String?
/// title:       String?
/// publishtime: String?
/// pic_small:   String?
/// }
/// }
///
/// \param responseClosure 数据回调闭包, 数据为字典组成的数组, 字典属性包含但不仅限于如下:
+ (void)getSearchDataWithKeyword:(NSString * _Nonnull)word pageSize:(NSInteger)size responseClosure:(void (^ _Nonnull)(NSDictionary * _Nonnull data))responseClosure;
- (nonnull instancetype)initWithItems:(NSArray<AVPlayerItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nonnull)item OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 播放引擎代理
SWIFT_PROTOCOL_NAMED("QSMusicPlayerDelegate")
@protocol QSMusicPlayerDelegate <NSObject>

/// 准备就绪, 可以开始播放
///
/// \param player 播放引擎
///
/// \param playerItem 当前的播放项目
- (void)player:(QSMusicPlayer * _Nonnull)player didBecomeAvailable:(AVPlayerItem * _Nonnull)playerItem;

/// 准备就绪失败, 不可以播放
///
/// \param player 播放引擎
///
/// \param error "22001"无可播放歌曲   "22469"版权保护什么的, 无法试听
- (void)playerNotBecomeAvailable:(QSMusicPlayer * _Nonnull)player error:(NSString * _Nonnull)error;

/// 网络错误，加载失败
///
/// \returns  
- (void)playerLoadFailed:(QSMusicPlayer * _Nonnull)player;

/// 更新缓存进度0.0~1.0
///
/// \param player 播放引擎
///
/// \param progress 缓存进度  0.0~1.0
- (void)player:(QSMusicPlayer * _Nonnull)player updateCacheProgress:(double)progress;

/// 更新播放时间
///
/// \param player 播放引擎
///
/// \param time 当前的播放时间
- (void)player:(QSMusicPlayer * _Nonnull)player updatePlayTime:(NSInteger)time;

/// 当前歌曲播放结束
///
/// \param player 播放引擎
- (void)playerWillPlayEnd:(QSMusicPlayer * _Nonnull)player;
@end

@class NSURLSessionTask;
@class TaskDelegate;
@class NSError;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class NSHTTPURLResponse;
@class NSInputStream;
@class NSURLSessionDataTask;
@class NSURLResponse;
@class NSURLSessionDownloadTask;
@class NSData;
@class NSCachedURLResponse;


/// Responsible for handling all delegate callbacks for the underlying session.
SWIFT_CLASS("_TtCC13QSMusicEngine7Manager15SessionDelegate")
@interface SessionDelegate : NSObject <NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate>
- (TaskDelegate * _Nullable)objectForKeyedSubscript:(NSURLSessionTask * _Nonnull)task;
- (void)setObject:(TaskDelegate * _Nullable)newValue forKeyedSubscript:(NSURLSessionTask * _Nonnull)task;

/// Initializes the SessionDelegate instance.
///
/// \returns  The new <code>SessionDelegate
/// </code> instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Overrides default behavior for NSURLSessionDelegate method URLSession:didBecomeInvalidWithError:.
@property (nonatomic, copy) void (^ _Nullable sessionDidBecomeInvalidWithError)(NSURLSession * _Nonnull, NSError * _Nullable);

/// Overrides all behavior for NSURLSessionDelegate method URLSession:didReceiveChallenge:completionHandler: and requires the caller to call the completionHandler.
@property (nonatomic, copy) void (^ _Nullable sessionDidReceiveChallengeWithCompletion)(NSURLSession * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));

/// Overrides default behavior for NSURLSessionDelegate method URLSessionDidFinishEventsForBackgroundURLSession:.
@property (nonatomic, copy) void (^ _Nullable sessionDidFinishEventsForBackgroundURLSession)(NSURLSession * _Nonnull);

/// Tells the delegate that the session has been invalidated.
///
/// \param session The session object that was invalidated.
///
/// \param error The error that caused invalidation, or nil if the invalidation was explicit.
- (void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;

/// Requests credentials from the delegate in response to a session-level authentication request from the remote server.
///
/// \param session The session containing the task that requested authentication.
///
/// \param challenge An object that contains the request for authentication.
///
/// \param completionHandler A handler that your delegate method must call providing the disposition and credential.
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;

/// Tells the delegate that all messages enqueued for a session have been delivered.
///
/// \param session The session that no longer has any outstanding requests.
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;

/// Overrides default behavior for NSURLSessionTaskDelegate method URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:.
@property (nonatomic, copy) NSURLRequest * _Nullable (^ _Nullable taskWillPerformHTTPRedirection)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSHTTPURLResponse * _Nonnull, NSURLRequest * _Nonnull);

/// Overrides all behavior for NSURLSessionTaskDelegate method URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler: and requires the caller to call the completionHandler.
@property (nonatomic, copy) void (^ _Nullable taskWillPerformHTTPRedirectionWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSHTTPURLResponse * _Nonnull, NSURLRequest * _Nonnull, void (^ _Nonnull)(NSURLRequest * _Nullable));

/// Overrides all behavior for NSURLSessionTaskDelegate method URLSession:task:didReceiveChallenge:completionHandler: and requires the caller to call the completionHandler.
@property (nonatomic, copy) void (^ _Nullable taskDidReceiveChallengeWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));

/// Overrides default behavior for NSURLSessionTaskDelegate method URLSession:session:task:needNewBodyStream:.
@property (nonatomic, copy) NSInputStream * _Nullable (^ _Nullable taskNeedNewBodyStream)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull);

/// Overrides all behavior for NSURLSessionTaskDelegate method URLSession:session:task:needNewBodyStream: and requires the caller to call the completionHandler.
@property (nonatomic, copy) void (^ _Nullable taskNeedNewBodyStreamWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, void (^ _Nonnull)(NSInputStream * _Nullable));

/// Overrides default behavior for NSURLSessionTaskDelegate method URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:.
@property (nonatomic, copy) void (^ _Nullable taskDidSendBodyData)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, int64_t, int64_t, int64_t);

/// Overrides default behavior for NSURLSessionTaskDelegate method URLSession:task:didCompleteWithError:.
@property (nonatomic, copy) void (^ _Nullable taskDidComplete)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSError * _Nullable);

/// Tells the delegate that the remote server requested an HTTP redirect.
///
/// \param session The session containing the task whose request resulted in a redirect.
///
/// \param task The task whose request resulted in a redirect.
///
/// \param response An object containing the server’s response to the original request.
///
/// \param request A URL request object filled out with the new location.
///
/// \param completionHandler A closure that your handler should call with either the value of the request
/// parameter, a modified URL request object, or NULL to refuse the redirect and
/// return the body of the redirect response.
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;

/// Requests credentials from the delegate in response to an authentication request from the remote server.
///
/// \param session The session containing the task whose request requires authentication.
///
/// \param task The task whose request requires authentication.
///
/// \param challenge An object that contains the request for authentication.
///
/// \param completionHandler A handler that your delegate method must call providing the disposition and credential.
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;

/// Tells the delegate when a task requires a new request body stream to send to the remote server.
///
/// \param session The session containing the task that needs a new body stream.
///
/// \param task The task that needs a new body stream.
///
/// \param completionHandler A completion handler that your delegate method should call with the new body stream.
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;

/// Periodically informs the delegate of the progress of sending body content to the server.
///
/// \param session The session containing the data task.
///
/// \param task The data task.
///
/// \param bytesSent The number of bytes sent since the last time this delegate method was called.
///
/// \param totalBytesSent The total number of bytes sent so far.
///
/// \param totalBytesExpectedToSend The expected length of the body data.
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;

/// Tells the delegate that the task finished transferring data.
///
/// \param session The session containing the task whose request finished transferring data.
///
/// \param task The task whose request finished transferring data.
///
/// \param error If an error occurred, an error object indicating how the transfer failed, otherwise nil.
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;

/// Overrides default behavior for NSURLSessionDataDelegate method URLSession:dataTask:didReceiveResponse:completionHandler:.
@property (nonatomic, copy) NSURLSessionResponseDisposition (^ _Nullable dataTaskDidReceiveResponse)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLResponse * _Nonnull);

/// Overrides all behavior for NSURLSessionDataDelegate method URLSession:dataTask:didReceiveResponse:completionHandler: and requires caller to call the completionHandler.
@property (nonatomic, copy) void (^ _Nullable dataTaskDidReceiveResponseWithCompletion)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLResponse * _Nonnull, void (^ _Nonnull)(NSURLSessionResponseDisposition));

/// Overrides default behavior for NSURLSessionDataDelegate method URLSession:dataTask:didBecomeDownloadTask:.
@property (nonatomic, copy) void (^ _Nullable dataTaskDidBecomeDownloadTask)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLSessionDownloadTask * _Nonnull);

/// Overrides default behavior for NSURLSessionDataDelegate method URLSession:dataTask:didReceiveData:.
@property (nonatomic, copy) void (^ _Nullable dataTaskDidReceiveData)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSData * _Nonnull);

/// Overrides default behavior for NSURLSessionDataDelegate method URLSession:dataTask:willCacheResponse:completionHandler:.
@property (nonatomic, copy) NSCachedURLResponse * _Nullable (^ _Nullable dataTaskWillCacheResponse)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSCachedURLResponse * _Nonnull);

/// Overrides all behavior for NSURLSessionDataDelegate method URLSession:dataTask:willCacheResponse:completionHandler: and requires caller to call the completionHandler.
@property (nonatomic, copy) void (^ _Nullable dataTaskWillCacheResponseWithCompletion)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSCachedURLResponse * _Nonnull, void (^ _Nonnull)(NSCachedURLResponse * _Nullable));

/// Tells the delegate that the data task received the initial reply (headers) from the server.
///
/// \param session The session containing the data task that received an initial reply.
///
/// \param dataTask The data task that received an initial reply.
///
/// \param response A URL response object populated with headers.
///
/// \param completionHandler A completion handler that your code calls to continue the transfer, passing a
/// constant to indicate whether the transfer should continue as a data task or
/// should become a download task.
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;

/// Tells the delegate that the data task was changed to a download task.
///
/// \param session The session containing the task that was replaced by a download task.
///
/// \param dataTask The data task that was replaced by a download task.
///
/// \param downloadTask The new download task that replaced the data task.
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;

/// Tells the delegate that the data task has received some of the expected data.
///
/// \param session The session containing the data task that provided data.
///
/// \param dataTask The data task that provided data.
///
/// \param data A data object containing the transferred data.
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;

/// Asks the delegate whether the data (or upload) task should store the response in the cache.
///
/// \param session The session containing the data (or upload) task.
///
/// \param dataTask The data (or upload) task.
///
/// \param proposedResponse The default caching behavior. This behavior is determined based on the current
/// caching policy and the values of certain received headers, such as the Pragma
/// and Cache-Control headers.
///
/// \param completionHandler A block that your handler must call, providing either the original proposed
/// response, a modified version of that response, or NULL to prevent caching the
/// response. If your delegate implements this method, it must call this completion
/// handler; otherwise, your app leaks memory.
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;

/// Overrides default behavior for NSURLSessionDownloadDelegate method URLSession:downloadTask:didFinishDownloadingToURL:.
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidFinishDownloadingToURL)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, NSURL * _Nonnull);

/// Overrides default behavior for NSURLSessionDownloadDelegate method URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:.
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidWriteData)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, int64_t, int64_t, int64_t);

/// Overrides default behavior for NSURLSessionDownloadDelegate method URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:.
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidResumeAtOffset)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, int64_t, int64_t);

/// Tells the delegate that a download task has finished downloading.
///
/// \param session The session containing the download task that finished.
///
/// \param downloadTask The download task that finished.
///
/// \param location A file URL for the temporary file. Because the file is temporary, you must either
/// open the file for reading or move it to a permanent location in your app’s sandbox
/// container directory before returning from this delegate method.
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;

/// Periodically informs the delegate about the download’s progress.
///
/// \param session The session containing the download task.
///
/// \param downloadTask The download task.
///
/// \param bytesWritten The number of bytes transferred since the last time this delegate
/// method was called.
///
/// \param totalBytesWritten The total number of bytes transferred so far.
///
/// \param totalBytesExpectedToWrite The expected length of the file, as provided by the Content-Length
/// header. If this header was not provided, the value is
/// <code>NSURLSessionTransferSizeUnknown
/// </code>.
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;

/// Tells the delegate that the download task has resumed downloading.
///
/// \param session The session containing the download task that finished.
///
/// \param downloadTask The download task that resumed. See explanation in the discussion.
///
/// \param fileOffset If the file's cache policy or last modified date prevents reuse of the
/// existing content, then this value is zero. Otherwise, this value is an
/// integer representing the number of bytes on disk that do not need to be
/// retrieved again.
///
/// \param expectedTotalBytes The expected length of the file, as provided by the Content-Length header.
/// If this header was not provided, the value is NSURLSessionTransferSizeUnknown.
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
- (BOOL)respondsToSelector:(SEL _Null_unspecified)selector;
@end

@class NSURLSessionStreamTask;
@class NSOutputStream;

@interface SessionDelegate (SWIFT_EXTENSION(QSMusicEngine)) <NSURLSessionStreamDelegate>

/// Overrides default behavior for NSURLSessionStreamDelegate method URLSession:readClosedForStreamTask:.
@property (nonatomic, copy) void (^ _Nullable streamTaskReadClosed)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);

/// Overrides default behavior for NSURLSessionStreamDelegate method URLSession:writeClosedForStreamTask:.
@property (nonatomic, copy) void (^ _Nullable streamTaskWriteClosed)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);

/// Overrides default behavior for NSURLSessionStreamDelegate method URLSession:betterRouteDiscoveredForStreamTask:.
@property (nonatomic, copy) void (^ _Nullable streamTaskBetterRouteDiscovered)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);

/// Overrides default behavior for NSURLSessionStreamDelegate method URLSession:streamTask:didBecomeInputStream:outputStream:.
@property (nonatomic, copy) void (^ _Nullable streamTaskDidBecomeInputStream)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull, NSInputStream * _Nonnull, NSOutputStream * _Nonnull);

/// Tells the delegate that the read side of the connection has been closed.
///
/// \param session The session.
///
/// \param streamTask The stream task.
- (void)URLSession:(NSURLSession * _Nonnull)session readClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;

/// Tells the delegate that the write side of the connection has been closed.
///
/// \param session The session.
///
/// \param streamTask The stream task.
- (void)URLSession:(NSURLSession * _Nonnull)session writeClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;

/// Tells the delegate that the system has determined that a better route to the host is available.
///
/// \param session The session.
///
/// \param streamTask The stream task.
- (void)URLSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;

/// Tells the delegate that the stream task has been completed and provides the unopened stream objects.
///
/// \param session The session.
///
/// \param streamTask The stream task.
///
/// \param inputStream The new input stream.
///
/// \param outputStream The new output stream.
- (void)URLSession:(NSURLSession * _Nonnull)session streamTask:(NSURLSessionStreamTask * _Nonnull)streamTask didBecomeInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
@end

#pragma clang diagnostic pop
